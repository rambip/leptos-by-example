//! generated automatically by build.rs
mod counter {
    include!("../examples/counter.rs");
}
mod hello_world {
    include!("../examples/hello_world.rs");
}
mod counter_without_macro {
    include!("../examples/counter_without_macro.rs");
}
mod error_boundary {
    include!("../examples/error_boundary.rs");
}
mod fetch {
    include!("../examples/fetch.rs");
}
mod html_callback {
    include!("../examples/html_callback.rs");
}
mod timer {
    include!("../examples/timer.rs");
}
mod maybe_signal {
    include!("../examples/maybe_signal.rs");
}
mod todomvc {
    include!("../examples/todomvc.rs");
}
mod iteration {
    include!("../examples/iteration.rs");
}
mod dynamic_font {
    include!("../examples/dynamic_font.rs");
}
mod counter_url_query {
    include!("../examples/counter_url_query.rs");
}
use super::{Example, pack_example};
pub const N_EXAMPLES: usize = 12usize;
pub type Examples = std::collections::HashMap<&'static str, Example>;
pub fn examples() -> Examples {
    [
        (
            "counter",
            Example {
                highlighted_source: "<pre style=\"background-color:#eff1f5;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos::*;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#4f5b66;\">]\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">SimpleCounter</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#bf616a;\">initial_value</span><span style=\"color:#4f5b66;\">: </span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#4f5b66;\">) -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// create a reactive signal with the initial value\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#4f5b66;\">(value, set_value) = </span><span style=\"color:#96b5b4;\">create_signal</span><span style=\"color:#4f5b66;\">(initial_value);\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// create event handlers for our buttons\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// note that `value` and `set_value` are `Copy`, so it&#39;s super easy to move them into closures\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> clear = </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| </span><span style=\"color:#96b5b4;\">set_value</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">0</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> decrement = </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| set_value.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">value</span><span style=\"color:#4f5b66;\">| *value -= </span><span style=\"color:#d08770;\">1</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> increment = </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| set_value.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">value</span><span style=\"color:#4f5b66;\">| *value += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// create user interfaces with the declarative `view!` macro\n</span><span style=\"color:#4f5b66;\">    view! {\n</span><span style=\"color:#4f5b66;\">        &lt;div&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;button on:click=clear&gt;Clear&lt;</span><span style=\"background-color:#bf616a;color:#eff1f5;\">/</span><span style=\"color:#4f5b66;\">button&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;button on:click=decrement&gt;-</span><span style=\"color:#d08770;\">1</span><span style=\"color:#4f5b66;\">&lt;/button&gt;\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#a7adba;\">// text nodes can be quoted or unquoted\n</span><span style=\"color:#4f5b66;\">            &lt;span&gt;&quot;</span><span style=\"color:#a3be8c;\">Value: </span><span style=\"color:#4f5b66;\">&quot; {value} &quot;</span><span style=\"color:#a3be8c;\">!</span><span style=\"color:#4f5b66;\">&quot;&lt;/span&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;button on:click=increment&gt;+</span><span style=\"color:#d08770;\">1</span><span style=\"color:#4f5b66;\">&lt;/button&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;/div&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">showcase</span><span style=\"color:#4f5b66;\">() -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    view!{\n</span><span style=\"color:#4f5b66;\">        &lt;SimpleCounter initial_value=</span><span style=\"color:#d08770;\">0</span><span style=\"color:#4f5b66;\">/&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span></pre>\n",
                code: pack_example(counter::showcase),
                css: None,
                description: "A simpler counter component.\n",
                motivation: "<p>This example shows how to write the most basic component.</p>\n<ul>\n<li>the component owns a state (the count)</li>\n<li>some browser events (onclick in this case) will update this state</li>\n<li>each time the state change, it will be rerendered</li>\n</ul>\n",
                related: Some(
                    "<p>See <a href=\"./counter_without_macro\">counter_without_macro</a> and <a href=\"./counter_url_query\">counter_url_query</a> for other versions of the same component</p>\n",
                ),
            },
        ),
        (
            "hello_world",
            Example {
                highlighted_source: "<pre style=\"background-color:#eff1f5;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos::*;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">showcase</span><span style=\"color:#4f5b66;\">() -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    view!{\n</span><span style=\"color:#4f5b66;\">        &quot;</span><span style=\"color:#a3be8c;\">hello world !</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span></pre>\n",
                code: pack_example(hello_world::showcase),
                css: None,
                description: "the most simple `hello world` code",
                motivation: "<p>In this example, you can see the bare minimum that is needed to work with leptos.\nyou import all the leptos functionnality, then define a function that returns any html (a <code>View</code>)</p>\n<p>Note that to actually render it in your browser, you have to mount it first</p>\n<pre><code class=\"language-rust\">fn main(){\n    mount_to_body(showcase);\n}\n</code></pre>\n",
                related: Some(
                    "<p><a href=\"https://leptos-rs.github.io/leptos/02_getting_started.html\">https://leptos-rs.github.io/leptos/02_getting_started.html</a></p>\n",
                ),
            },
        ),
        (
            "counter_without_macro",
            Example {
                highlighted_source: "<pre style=\"background-color:#eff1f5;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos::{ev, html::*, *};\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#a7adba;\">/// A simple counter view.\n</span><span style=\"color:#a7adba;\">// A component is really just a function call: it runs once to create the DOM and reactive system\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">counter</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#bf616a;\">initial_value</span><span style=\"color:#4f5b66;\">: </span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#4f5b66;\">, </span><span style=\"color:#bf616a;\">step</span><span style=\"color:#4f5b66;\">: </span><span style=\"color:#b48ead;\">u32</span><span style=\"color:#4f5b66;\">) -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> count = RwSignal::new(Count::new(initial_value, step));\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// the function name is the same as the HTML tag name\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#96b5b4;\">div</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// children can be added with .child()\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// this takes any type that implements IntoView as its argument\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// for example, a string or an HtmlElement&lt;_&gt;\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// it can also take an array of types that impl IntoView\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// or a tuple of up to 26 objects that impl IntoView\n</span><span style=\"color:#4f5b66;\">        .</span><span style=\"color:#96b5b4;\">child</span><span style=\"color:#4f5b66;\">((\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#96b5b4;\">button</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                </span><span style=\"color:#a7adba;\">// typed events found in leptos::ev\n</span><span style=\"color:#4f5b66;\">                </span><span style=\"color:#a7adba;\">// 1) prevent typos in event names\n</span><span style=\"color:#4f5b66;\">                </span><span style=\"color:#a7adba;\">// 2) allow for correct type inference in callbacks\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">on</span><span style=\"color:#4f5b66;\">(ev::click, </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| count.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(Count::clear))\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">child</span><span style=\"color:#4f5b66;\">(&quot;</span><span style=\"color:#a3be8c;\">Clear</span><span style=\"color:#4f5b66;\">&quot;),\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#96b5b4;\">button</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">on</span><span style=\"color:#4f5b66;\">(ev::click, </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| count.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(Count::decrease))\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">child</span><span style=\"color:#4f5b66;\">(&quot;</span><span style=\"color:#a3be8c;\">-1</span><span style=\"color:#4f5b66;\">&quot;),\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#96b5b4;\">span</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">child</span><span style=\"color:#4f5b66;\">((&quot;</span><span style=\"color:#a3be8c;\">Value: </span><span style=\"color:#4f5b66;\">&quot;, </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| count.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">value</span><span style=\"color:#4f5b66;\">(), &quot;</span><span style=\"color:#a3be8c;\">!</span><span style=\"color:#4f5b66;\">&quot;)),\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#96b5b4;\">button</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">on</span><span style=\"color:#4f5b66;\">(ev::click, </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| count.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(Count::increase))\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">child</span><span style=\"color:#4f5b66;\">(&quot;</span><span style=\"color:#a3be8c;\">+1</span><span style=\"color:#4f5b66;\">&quot;),\n</span><span style=\"color:#4f5b66;\">        ))\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#4f5b66;\">(Debug, Clone)]\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#4f5b66;\">Count {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#bf616a;\">value</span><span style=\"color:#4f5b66;\">: </span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#4f5b66;\">,\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#bf616a;\">step</span><span style=\"color:#4f5b66;\">: </span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#4f5b66;\">,\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">impl </span><span style=\"color:#4f5b66;\">Count {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">new</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#bf616a;\">value</span><span style=\"color:#4f5b66;\">: </span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#4f5b66;\">, </span><span style=\"color:#bf616a;\">step</span><span style=\"color:#4f5b66;\">: </span><span style=\"color:#b48ead;\">u32</span><span style=\"color:#4f5b66;\">) -&gt; </span><span style=\"color:#b48ead;\">Self </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">        Count {\n</span><span style=\"color:#4f5b66;\">            value,\n</span><span style=\"color:#4f5b66;\">            step: step as </span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#4f5b66;\">,\n</span><span style=\"color:#4f5b66;\">        }\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">value</span><span style=\"color:#4f5b66;\">(&amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">) -&gt; </span><span style=\"color:#b48ead;\">i32 </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.value\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">increase</span><span style=\"color:#4f5b66;\">(&amp;</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">) {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.value += </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.step;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">decrease</span><span style=\"color:#4f5b66;\">(&amp;</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">) {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.value += -</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.step;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">clear</span><span style=\"color:#4f5b66;\">(&amp;</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">) {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.value = </span><span style=\"color:#d08770;\">0</span><span style=\"color:#4f5b66;\">;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">showcase</span><span style=\"color:#4f5b66;\">() -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#96b5b4;\">counter</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">0</span><span style=\"color:#4f5b66;\">, </span><span style=\"color:#d08770;\">1</span><span style=\"color:#4f5b66;\">)\n</span><span style=\"color:#4f5b66;\">}\n</span></pre>\n",
                code: pack_example(counter_without_macro::showcase),
                css: None,
                description: "simple counter component but without macros",
                motivation: "<p>You can use the builder pattern if you don't feel like using a macro\nThis is the way the <code>view!</code> macro works, if you're curious</p>\n",
                related: Some(
                    "<p>for the same example using macros, see <a href=\"./counter\">counter</a></p>\n",
                ),
            },
        ),
        (
            "error_boundary",
            Example {
                highlighted_source: "<pre style=\"background-color:#eff1f5;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos::*;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">showcase</span><span style=\"color:#4f5b66;\">() -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#4f5b66;\">(value, set_value) = </span><span style=\"color:#96b5b4;\">create_signal</span><span style=\"color:#4f5b66;\">(Ok(</span><span style=\"color:#d08770;\">0</span><span style=\"color:#4f5b66;\">));\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// when input changes, try to parse a number from the input\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> on_input = </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|ev| </span><span style=\"color:#96b5b4;\">set_value</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#96b5b4;\">event_target_value</span><span style=\"color:#4f5b66;\">(&amp;ev).parse::&lt;</span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#4f5b66;\">&gt;());\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    view! {\n</span><span style=\"color:#4f5b66;\">        &lt;h1&gt;&quot;</span><span style=\"color:#a3be8c;\">Error Handling</span><span style=\"color:#4f5b66;\">&quot;&lt;/h1&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;label&gt;\n</span><span style=\"color:#4f5b66;\">            &quot;</span><span style=\"color:#a3be8c;\">Type a number (or something that&#39;s not a number!)</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">            &lt;input </span><span style=\"color:#b48ead;\">type</span><span style=\"color:#4f5b66;\">=&quot;</span><span style=\"color:#a3be8c;\">number</span><span style=\"color:#4f5b66;\">&quot; on:input=on_input/&gt;\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#a7adba;\">// If an `Err(_) had been rendered inside the &lt;ErrorBoundary/&gt;,\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#a7adba;\">// the fallback will be displayed. Otherwise, the children of the\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#a7adba;\">// &lt;ErrorBoundary/&gt; will be displayed.\n</span><span style=\"color:#4f5b66;\">            &lt;ErrorBoundary\n</span><span style=\"color:#4f5b66;\">                </span><span style=\"color:#a7adba;\">// the fallback receives a signal containing current errors\n</span><span style=\"color:#4f5b66;\">                </span><span style=\"color:#8fa1b3;\">fallback</span><span style=\"color:#4f5b66;\">=|</span><span style=\"color:#bf616a;\">errors</span><span style=\"color:#4f5b66;\">| view! {\n</span><span style=\"color:#4f5b66;\">                    &lt;div class=&quot;</span><span style=\"color:#a3be8c;\">error</span><span style=\"color:#4f5b66;\">&quot;&gt;\n</span><span style=\"color:#4f5b66;\">                        &lt;p&gt;&quot;</span><span style=\"color:#a3be8c;\">Not a number! Errors: </span><span style=\"color:#4f5b66;\">&quot;&lt;/p&gt;\n</span><span style=\"color:#4f5b66;\">                        </span><span style=\"color:#a7adba;\">// we can render a list of errors\n</span><span style=\"color:#4f5b66;\">                        </span><span style=\"color:#a7adba;\">// as strings, if we&#39;d like\n</span><span style=\"color:#4f5b66;\">                        &lt;ul&gt;\n</span><span style=\"color:#4f5b66;\">                            {</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| errors.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                                .</span><span style=\"color:#96b5b4;\">into_iter</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                                .</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#4f5b66;\">(|(_, </span><span style=\"color:#bf616a;\">e</span><span style=\"color:#4f5b66;\">)| view! { &lt;li&gt;{e.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#4f5b66;\">()}&lt;/li&gt;})\n</span><span style=\"color:#4f5b66;\">                                .</span><span style=\"color:#96b5b4;\">collect_view</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                            }\n</span><span style=\"color:#4f5b66;\">                        &lt;/ul&gt;\n</span><span style=\"color:#4f5b66;\">                    &lt;/div&gt;\n</span><span style=\"color:#4f5b66;\">                }\n</span><span style=\"color:#4f5b66;\">            &gt;\n</span><span style=\"color:#4f5b66;\">                &lt;p&gt;\n</span><span style=\"color:#4f5b66;\">                    &quot;</span><span style=\"color:#a3be8c;\">You entered </span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#a7adba;\">// because `value` is `Result&lt;i32, _&gt;`,\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#a7adba;\">// it will render the `i32` if it is `Ok`,\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#a7adba;\">// and render nothing and trigger the error boundary\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#a7adba;\">// if it is `Err`. It&#39;s a signal, so this will dynamically\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#a7adba;\">// update when `value` changes\n</span><span style=\"color:#4f5b66;\">                    &lt;strong&gt;{value}&lt;/strong&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;/p&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;/ErrorBoundary&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;/label&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span></pre>\n",
                code: pack_example(error_boundary::showcase),
                css: None,
                description: "illustrates how to show a custom error message to the user",
                motivation: "<p>To catch an error emmited by one of the children, you can use <code>ErrorBoundary</code></p>\n",
                related: Some(
                    "<p><a href=\"https://leptos-rs.github.io/leptos/view/07_errors.html?highlight=error%20hnd#error-handling\">https://leptos-rs.github.io/leptos/view/07_errors.html?highlight=error%20hnd#error-handling</a></p>\n",
                ),
            },
        ),
        (
            "fetch",
            Example {
                highlighted_source: "<pre style=\"background-color:#eff1f5;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos::{error::Result, *};\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">serde::{Deserialize, Serialize};\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">thiserror::Error;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#4f5b66;\">(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#4f5b66;\">Cat {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#bf616a;\">url</span><span style=\"color:#4f5b66;\">: String,\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#4f5b66;\">(Error, Clone, Debug)]\n</span><span style=\"color:#b48ead;\">pub enum </span><span style=\"color:#4f5b66;\">CatError {\n</span><span style=\"color:#4f5b66;\">    #[</span><span style=\"color:#bf616a;\">error</span><span style=\"color:#4f5b66;\">(&quot;</span><span style=\"color:#a3be8c;\">Please request more than zero cats.</span><span style=\"color:#4f5b66;\">&quot;)]\n</span><span style=\"color:#4f5b66;\">    NonZeroCats,\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">type </span><span style=\"color:#4f5b66;\">CatCount = </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#4f5b66;\">;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">fetch_cats</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#bf616a;\">count</span><span style=\"color:#4f5b66;\">: CatCount) -&gt; Result&lt;Vec&lt;String&gt;&gt; {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#4f5b66;\"> count &gt; </span><span style=\"color:#d08770;\">0 </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// make the request\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> res = reqwasm::http::Request::get(&amp;format!(\n</span><span style=\"color:#4f5b66;\">            &quot;</span><span style=\"color:#a3be8c;\">https://api.thecatapi.com/v1/images/search?limit=</span><span style=\"color:#d08770;\">{count}</span><span style=\"color:#4f5b66;\">&quot;,\n</span><span style=\"color:#4f5b66;\">        ))\n</span><span style=\"color:#4f5b66;\">        .</span><span style=\"color:#96b5b4;\">send</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">        .await?\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// convert it to JSON\n</span><span style=\"color:#4f5b66;\">        .json::&lt;Vec&lt;Cat&gt;&gt;()\n</span><span style=\"color:#4f5b66;\">        .await?\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// extract the URL field for each cat\n</span><span style=\"color:#4f5b66;\">        .</span><span style=\"color:#96b5b4;\">into_iter</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">        .</span><span style=\"color:#96b5b4;\">take</span><span style=\"color:#4f5b66;\">(count)\n</span><span style=\"color:#4f5b66;\">        .</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">cat</span><span style=\"color:#4f5b66;\">| cat.url)\n</span><span style=\"color:#4f5b66;\">        .collect::&lt;Vec&lt;_&gt;&gt;();\n</span><span style=\"color:#4f5b66;\">        Ok(res)\n</span><span style=\"color:#4f5b66;\">    } </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">        Err(CatError::NonZeroCats.</span><span style=\"color:#96b5b4;\">into</span><span style=\"color:#4f5b66;\">())\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">showcase</span><span style=\"color:#4f5b66;\">() -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#4f5b66;\">(cat_count, set_cat_count) = create_signal::&lt;CatCount&gt;(</span><span style=\"color:#d08770;\">0</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// we use local_resource here because\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// 1) our error type isn&#39;t serializable/deserializable\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// 2) we&#39;re not doing server-side rendering in this example anyway\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">//    (during SSR, create_resource will begin loading on the server and resolve on the client)\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> cats = </span><span style=\"color:#96b5b4;\">create_local_resource</span><span style=\"color:#4f5b66;\">(cat_count, fetch_cats);\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> fallback = </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|errors: RwSignal&lt;Errors&gt;| {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> error_list = </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| {\n</span><span style=\"color:#4f5b66;\">            errors.</span><span style=\"color:#96b5b4;\">with</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">errors</span><span style=\"color:#4f5b66;\">| {\n</span><span style=\"color:#4f5b66;\">                errors\n</span><span style=\"color:#4f5b66;\">                    .</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                    .</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#4f5b66;\">(|(_, </span><span style=\"color:#bf616a;\">e</span><span style=\"color:#4f5b66;\">)| view! { &lt;li&gt;{e.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#4f5b66;\">()}&lt;/li&gt; })\n</span><span style=\"color:#4f5b66;\">                    .</span><span style=\"color:#96b5b4;\">collect_view</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">            })\n</span><span style=\"color:#4f5b66;\">        };\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">        view! {\n</span><span style=\"color:#4f5b66;\">            &lt;div class=&quot;</span><span style=\"color:#a3be8c;\">error</span><span style=\"color:#4f5b66;\">&quot;&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;h2&gt;&quot;</span><span style=\"color:#a3be8c;\">Error</span><span style=\"color:#4f5b66;\">&quot;&lt;/h2&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;ul&gt;{error_list}&lt;/ul&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;/div&gt;\n</span><span style=\"color:#4f5b66;\">        }\n</span><span style=\"color:#4f5b66;\">    };\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// the renderer can handle Option&lt;_&gt; and Result&lt;_&gt; states\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// by displaying nothing for None if the resource is still loading\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// and by using the ErrorBoundary fallback to catch Err(_)\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// so we&#39;ll just use `.and_then()` to map over the happy path\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> cats_view = </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| {\n</span><span style=\"color:#4f5b66;\">        cats.</span><span style=\"color:#96b5b4;\">and_then</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">data</span><span style=\"color:#4f5b66;\">| {\n</span><span style=\"color:#4f5b66;\">            data.</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">s</span><span style=\"color:#4f5b66;\">| view! { &lt;p&gt;&lt;img src={s}/&gt;&lt;/p&gt; })\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">collect_view</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">        })\n</span><span style=\"color:#4f5b66;\">    };\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    view! {\n</span><span style=\"color:#4f5b66;\">        &lt;div&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;label&gt;\n</span><span style=\"color:#4f5b66;\">                &quot;</span><span style=\"color:#a3be8c;\">How many cats would you like?</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                &lt;input\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#b48ead;\">type</span><span style=\"color:#4f5b66;\">=&quot;</span><span style=\"color:#a3be8c;\">number</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                    prop:value=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| cat_count.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                    on:input=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|ev| {\n</span><span style=\"color:#4f5b66;\">                        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> val = </span><span style=\"color:#96b5b4;\">event_target_value</span><span style=\"color:#4f5b66;\">(&amp;ev).parse::&lt;CatCount&gt;().</span><span style=\"color:#96b5b4;\">unwrap_or</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">0</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">                        </span><span style=\"color:#96b5b4;\">set_cat_count</span><span style=\"color:#4f5b66;\">(val);\n</span><span style=\"color:#4f5b66;\">                    }\n</span><span style=\"color:#4f5b66;\">                /&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;/label&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;ErrorBoundary fallback&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;Transition fallback=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| {\n</span><span style=\"color:#4f5b66;\">                    view! { &lt;div&gt;&quot;</span><span style=\"color:#a3be8c;\">Loading (Suspense Fallback)...</span><span style=\"color:#4f5b66;\">&quot;&lt;/div&gt; }\n</span><span style=\"color:#4f5b66;\">                }&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;div&gt;\n</span><span style=\"color:#4f5b66;\">                    {cats_view}\n</span><span style=\"color:#4f5b66;\">                &lt;/div&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;/Transition&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;/ErrorBoundary&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;/div&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span></pre>\n",
                code: pack_example(fetch::showcase),
                css: None,
                description: "This example shows how to fetch data from the client in WebAssembly.\n",
                motivation: "<p>Mainly illustrate the <code>create_resource</code> function. From the leptos docs:\nA Resource is a reactive data structure that reflects the current state of an asynchronous task, allowing you to integrate asynchronous Futures into the synchronous reactive system. Rather than waiting for its data to load with .await, you transform the Future into a signal that returns Some(T) if it has resolved, and None if it’s still pending.</p>\n",
                related: Some(
                    "<p><a href=\"./error_boundary\">error_boundary</a>\n<a href=\"https://docs.rs/leptos/latest/leptos/fn.create_resource.html\">https://docs.rs/leptos/latest/leptos/fn.create_resource.html</a>\n<a href=\"https://leptos-rs.github.io/leptos/async/10_resources.html\">https://leptos-rs.github.io/leptos/async/10_resources.html</a></p>\n",
                ),
            },
        ),
        (
            "html_callback",
            Example {
                highlighted_source: "<pre style=\"background-color:#eff1f5;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos::html::AnyElement;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#4f5b66;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">MyFavoriteNumbers</span><span style=\"color:#4f5b66;\">(\n</span><span style=\"color:#4f5b66;\">    #[prop(</span><span style=\"color:#bf616a;\">into</span><span style=\"color:#4f5b66;\">)]\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#bf616a;\">render_number</span><span style=\"color:#4f5b66;\">: Callback&lt;</span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#4f5b66;\">, HtmlElement&lt;AnyElement&gt;&gt;\n</span><span style=\"color:#4f5b66;\">    ) -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    view!{\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// this syntax only works on nightly.\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// When you are not on nightly, use `render_number.call(...)`\n</span><span style=\"color:#4f5b66;\">        I like {</span><span style=\"color:#96b5b4;\">render_number</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">73</span><span style=\"color:#4f5b66;\">)}\n</span><span style=\"color:#4f5b66;\">        &lt;br/&gt;\n</span><span style=\"color:#4f5b66;\">        But I love {</span><span style=\"color:#96b5b4;\">render_number</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">42</span><span style=\"color:#4f5b66;\">)}\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">showcase</span><span style=\"color:#4f5b66;\">() -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    view!{\n</span><span style=\"color:#4f5b66;\">        &lt;MyFavoriteNumbers \n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#8fa1b3;\">render_number</span><span style=\"color:#4f5b66;\">=|</span><span style=\"color:#bf616a;\">x</span><span style=\"color:#4f5b66;\">| view!{&lt;b&gt;{x}&lt;/b&gt;}\n</span><span style=\"color:#4f5b66;\">        /&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span></pre>\n",
                code: pack_example(html_callback::showcase),
                css: None,
                description: "pass a function that returns html as a prop",
                motivation: "<p>Illustrates how you can pass a function that returns html as a prop,\nwith the help of callbacks</p>\n",
                related: Some(
                    "<p><a href=\"https://docs.rs/leptos/latest/leptos/callback/index.html\">https://docs.rs/leptos/latest/leptos/callback/index.html</a></p>\n",
                ),
            },
        ),
        (
            "timer",
            Example {
                highlighted_source: "<pre style=\"background-color:#eff1f5;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos::{leptos_dom::helpers::IntervalHandle, *};\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">std::time::Duration;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#a7adba;\">/// Timer example, demonstrating the use of `use_interval`.\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">showcase</span><span style=\"color:#4f5b66;\">() -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// count_a updates with a fixed interval of 1000 ms, whereas count_b has a dynamic\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// update interval.\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#4f5b66;\">(count_a, set_count_a) = </span><span style=\"color:#96b5b4;\">create_signal</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">0_</span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#4f5b66;\">(count_b, set_count_b) = </span><span style=\"color:#96b5b4;\">create_signal</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">0_</span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#4f5b66;\">(interval, set_interval) = </span><span style=\"color:#96b5b4;\">create_signal</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">1000</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#96b5b4;\">use_interval</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">1000</span><span style=\"color:#4f5b66;\">, </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| {\n</span><span style=\"color:#4f5b66;\">        set_count_a.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">c</span><span style=\"color:#4f5b66;\">| *c += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">    });\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#96b5b4;\">use_interval</span><span style=\"color:#4f5b66;\">(interval, </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| {\n</span><span style=\"color:#4f5b66;\">        set_count_b.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">c</span><span style=\"color:#4f5b66;\">| *c += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">    });\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    view! {\n</span><span style=\"color:#4f5b66;\">        &lt;div&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;div&gt;&quot;</span><span style=\"color:#a3be8c;\">Count A (fixed interval of 1000 ms)</span><span style=\"color:#4f5b66;\">&quot;&lt;/div&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;div&gt;{count_a}&lt;/div&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;div&gt;&quot;</span><span style=\"color:#a3be8c;\">Count B (dynamic interval, currently </span><span style=\"color:#4f5b66;\">&quot; {interval} &quot;</span><span style=\"color:#a3be8c;\"> ms)</span><span style=\"color:#4f5b66;\">&quot;&lt;/div&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;div&gt;{count_b}&lt;/div&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;input prop:value=interval on:input=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|ev| {\n</span><span style=\"color:#4f5b66;\">                </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#4f5b66;\">Ok(value) = </span><span style=\"color:#96b5b4;\">event_target_value</span><span style=\"color:#4f5b66;\">(&amp;ev).parse::&lt;</span><span style=\"color:#b48ead;\">u64</span><span style=\"color:#4f5b66;\">&gt;() {\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#96b5b4;\">set_interval</span><span style=\"color:#4f5b66;\">(value);\n</span><span style=\"color:#4f5b66;\">                }\n</span><span style=\"color:#4f5b66;\">            }/&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;/div&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#a7adba;\">/// Hook to wrap the underlying `setInterval` call and make it reactive w.r.t.\n</span><span style=\"color:#a7adba;\">/// possible changes of the timer interval.\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">use_interval</span><span style=\"color:#4f5b66;\">&lt;T, F&gt;(</span><span style=\"color:#bf616a;\">interval_millis</span><span style=\"color:#4f5b66;\">: T, </span><span style=\"color:#bf616a;\">f</span><span style=\"color:#4f5b66;\">: F)\n</span><span style=\"color:#b48ead;\">where\n</span><span style=\"color:#4f5b66;\">    F: Fn() + Clone + </span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#4f5b66;\">,\n</span><span style=\"color:#4f5b66;\">    T: Into&lt;MaybeSignal&lt;</span><span style=\"color:#b48ead;\">u64</span><span style=\"color:#4f5b66;\">&gt;&gt; + </span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#4f5b66;\">,\n</span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> interval_millis = interval_millis.</span><span style=\"color:#96b5b4;\">into</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#96b5b4;\">create_effect</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|prev_handle: Option&lt;IntervalHandle&gt;| {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// effects get their previous return value as an argument\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// each time the effect runs, it will return the interval handle\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// so if we have a previous one, we cancel it\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#4f5b66;\">Some(prev_handle) = prev_handle {\n</span><span style=\"color:#4f5b66;\">            prev_handle.</span><span style=\"color:#96b5b4;\">clear</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">        };\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// here, we return the handle\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#96b5b4;\">set_interval_with_handle</span><span style=\"color:#4f5b66;\">(\n</span><span style=\"color:#4f5b66;\">            f.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#4f5b66;\">(),\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#a7adba;\">// this is the only reactive access, so this effect will only\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#a7adba;\">// re-run when the interval changes\n</span><span style=\"color:#4f5b66;\">            Duration::from_millis(interval_millis.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">()),\n</span><span style=\"color:#4f5b66;\">        )\n</span><span style=\"color:#4f5b66;\">        .</span><span style=\"color:#96b5b4;\">expect</span><span style=\"color:#4f5b66;\">(&quot;</span><span style=\"color:#a3be8c;\">could not create interval</span><span style=\"color:#4f5b66;\">&quot;)\n</span><span style=\"color:#4f5b66;\">    });\n</span><span style=\"color:#4f5b66;\">}\n</span></pre>\n",
                code: pack_example(timer::showcase),
                css: None,
                description: "simple timer based on setInterval",
                motivation: "<p>This example illustrates how you can add timing to your app, the same way as in javascript</p>\n",
                related: Some(
                    "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/setInterval\">https://developer.mozilla.org/en-US/docs/Web/API/setInterval</a></p>\n",
                ),
            },
        ),
        (
            "maybe_signal",
            Example {
                highlighted_source: "<pre style=\"background-color:#eff1f5;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos::*;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#4f5b66;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Greeter</span><span style=\"color:#4f5b66;\">(\n</span><span style=\"color:#4f5b66;\">    #[prop(</span><span style=\"color:#bf616a;\">into</span><span style=\"color:#4f5b66;\">)]\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#bf616a;\">name</span><span style=\"color:#4f5b66;\">: MaybeSignal&lt;String&gt;\n</span><span style=\"color:#4f5b66;\">    ) -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    view!{\n</span><span style=\"color:#4f5b66;\">        &lt;p&gt;\n</span><span style=\"color:#4f5b66;\">            hello {</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| </span><span style=\"color:#96b5b4;\">name</span><span style=\"color:#4f5b66;\">()} !\n</span><span style=\"color:#4f5b66;\">        &lt;/p&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">showcase</span><span style=\"color:#4f5b66;\">() -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#4f5b66;\">(changing_name, set_name) = </span><span style=\"color:#96b5b4;\">create_signal</span><span style=\"color:#4f5b66;\">(&quot;</span><span style=\"color:#a3be8c;\">bob</span><span style=\"color:#4f5b66;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#4f5b66;\">());\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    view!{\n</span><span style=\"color:#4f5b66;\">        &lt;h3&gt;This name will never change&lt;</span><span style=\"background-color:#bf616a;color:#eff1f5;\">/</span><span style=\"color:#4f5b66;\">h3&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;Greeter name=&quot;</span><span style=\"color:#a3be8c;\">rust</span><span style=\"color:#4f5b66;\">&quot;/&gt;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">        &lt;h3&gt;This name can change&lt;</span><span style=\"background-color:#bf616a;color:#eff1f5;\">/</span><span style=\"color:#4f5b66;\">h3&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;div&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;button on:click=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| </span><span style=\"color:#96b5b4;\">set_name</span><span style=\"color:#4f5b66;\">(&quot;</span><span style=\"color:#a3be8c;\">alice</span><span style=\"color:#4f5b66;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#4f5b66;\">())&gt;\n</span><span style=\"color:#4f5b66;\">                alice\n</span><span style=\"color:#4f5b66;\">            &lt;/button&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;button on:click=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| </span><span style=\"color:#96b5b4;\">set_name</span><span style=\"color:#4f5b66;\">(&quot;</span><span style=\"color:#a3be8c;\">bob</span><span style=\"color:#4f5b66;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#4f5b66;\">())&gt;\n</span><span style=\"color:#4f5b66;\">                bob\n</span><span style=\"color:#4f5b66;\">            &lt;/button&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;/div&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;Greeter name=changing_name/&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span></pre>\n",
                code: pack_example(maybe_signal::showcase),
                css: None,
                description: "pass either a dynamic or a static property",
                motivation: "<p>illustrates how to use <code>MaybeSignal</code> to pass either a dynamic, either a static prop</p>\n",
                related: Some(
                    "<p><a href=\"https://docs.rs/leptos/latest/leptos/enum.MaybeSignal.html\">https://docs.rs/leptos/latest/leptos/enum.MaybeSignal.html</a></p>\n",
                ),
            },
        ),
        (
            "todomvc",
            Example {
                highlighted_source: "<pre style=\"background-color:#eff1f5;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos::{html::Input, leptos_dom::helpers::location_hash, *};\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos::logging::error;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">serde::{Deserialize, Serialize};\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">uuid::Uuid;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#4f5b66;\">(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#4f5b66;\">Todos(pub Vec&lt;Todo&gt;);\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">const </span><span style=\"color:#d08770;\">STORAGE_KEY</span><span style=\"color:#4f5b66;\">: &amp;</span><span style=\"color:#b48ead;\">str </span><span style=\"color:#4f5b66;\">= &quot;</span><span style=\"color:#a3be8c;\">todos-leptos</span><span style=\"color:#4f5b66;\">&quot;;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#a7adba;\">// Basic operations to manipulate the todo list: nothing really interesting here\n</span><span style=\"color:#b48ead;\">impl </span><span style=\"color:#4f5b66;\">Todos {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">new</span><span style=\"color:#4f5b66;\">() -&gt; </span><span style=\"color:#b48ead;\">Self </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> starting_todos =\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#96b5b4;\">window</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">local_storage</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">ok</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">flatten</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">and_then</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">storage</span><span style=\"color:#4f5b66;\">| {\n</span><span style=\"color:#4f5b66;\">                    storage.</span><span style=\"color:#96b5b4;\">get_item</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">STORAGE_KEY</span><span style=\"color:#4f5b66;\">).</span><span style=\"color:#96b5b4;\">ok</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">flatten</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">and_then</span><span style=\"color:#4f5b66;\">(\n</span><span style=\"color:#4f5b66;\">                        |</span><span style=\"color:#bf616a;\">value</span><span style=\"color:#4f5b66;\">| serde_json::from_str::&lt;Vec&lt;Todo&gt;&gt;(&amp;value).</span><span style=\"color:#96b5b4;\">ok</span><span style=\"color:#4f5b66;\">(),\n</span><span style=\"color:#4f5b66;\">                    )\n</span><span style=\"color:#4f5b66;\">                })\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">unwrap_or_default</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">Self</span><span style=\"color:#4f5b66;\">(starting_todos)\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">is_empty</span><span style=\"color:#4f5b66;\">(&amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">) -&gt; </span><span style=\"color:#b48ead;\">bool </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.</span><span style=\"color:#d08770;\">0.</span><span style=\"color:#96b5b4;\">is_empty</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">add</span><span style=\"color:#4f5b66;\">(&amp;</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">, </span><span style=\"color:#bf616a;\">todo</span><span style=\"color:#4f5b66;\">: Todo) {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.</span><span style=\"color:#d08770;\">0.</span><span style=\"color:#96b5b4;\">push</span><span style=\"color:#4f5b66;\">(todo);\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">remove</span><span style=\"color:#4f5b66;\">(&amp;</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">, </span><span style=\"color:#bf616a;\">id</span><span style=\"color:#4f5b66;\">: Uuid) {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.</span><span style=\"color:#96b5b4;\">retain</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">todo</span><span style=\"color:#4f5b66;\">| todo.id != id);\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">remaining</span><span style=\"color:#4f5b66;\">(&amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">) -&gt; </span><span style=\"color:#b48ead;\">usize </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// `todo.completed` is a signal, so we call .get() to access its value\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.</span><span style=\"color:#d08770;\">0.</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">filter</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">todo</span><span style=\"color:#4f5b66;\">| !todo.completed.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">()).</span><span style=\"color:#96b5b4;\">count</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">completed</span><span style=\"color:#4f5b66;\">(&amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">) -&gt; </span><span style=\"color:#b48ead;\">usize </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// `todo.completed` is a signal, so we call .get() to access its value\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.</span><span style=\"color:#d08770;\">0.</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">filter</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">todo</span><span style=\"color:#4f5b66;\">| todo.completed.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">()).</span><span style=\"color:#96b5b4;\">count</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">toggle_all</span><span style=\"color:#4f5b66;\">(&amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">) {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// if all are complete, mark them all active\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">if </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.</span><span style=\"color:#96b5b4;\">remaining</span><span style=\"color:#4f5b66;\">() == </span><span style=\"color:#d08770;\">0 </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#4f5b66;\"> todo in &amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.</span><span style=\"color:#d08770;\">0 </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">                todo.completed.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">completed</span><span style=\"color:#4f5b66;\">| {\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#b48ead;\">if </span><span style=\"color:#4f5b66;\">*completed {\n</span><span style=\"color:#4f5b66;\">                        *completed = </span><span style=\"color:#d08770;\">false\n</span><span style=\"color:#4f5b66;\">                    }\n</span><span style=\"color:#4f5b66;\">                });\n</span><span style=\"color:#4f5b66;\">            }\n</span><span style=\"color:#4f5b66;\">        }\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// otherwise, mark them all complete\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#4f5b66;\"> todo in &amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.</span><span style=\"color:#d08770;\">0 </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">                todo.completed.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">true</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">            }\n</span><span style=\"color:#4f5b66;\">        }\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">clear_completed</span><span style=\"color:#4f5b66;\">(&amp;</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">) {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.</span><span style=\"color:#96b5b4;\">retain</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">todo</span><span style=\"color:#4f5b66;\">| !todo.completed.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">());\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">retain</span><span style=\"color:#4f5b66;\">(&amp;</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">, </span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">f</span><span style=\"color:#4f5b66;\">: impl FnMut(&amp;</span><span style=\"color:#bf616a;\">Todo</span><span style=\"color:#4f5b66;\">) -&gt; </span><span style=\"color:#b48ead;\">bool</span><span style=\"color:#4f5b66;\">) {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.</span><span style=\"color:#d08770;\">0.</span><span style=\"color:#96b5b4;\">retain</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">todo</span><span style=\"color:#4f5b66;\">| {\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> retain = </span><span style=\"color:#96b5b4;\">f</span><span style=\"color:#4f5b66;\">(todo);\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#a7adba;\">// because these signals are created at the top level,\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#a7adba;\">// they are owned by the &lt;TodoMVC/&gt; component and not\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#a7adba;\">// by the individual &lt;Todo/&gt; components. This means\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#a7adba;\">// that if they are not manually disposed when removed, they\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#a7adba;\">// will be held onto until the &lt;TodoMVC/&gt; is unmounted.\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#b48ead;\">if </span><span style=\"color:#4f5b66;\">!retain {\n</span><span style=\"color:#4f5b66;\">                todo.title.</span><span style=\"color:#96b5b4;\">dispose</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">                todo.completed.</span><span style=\"color:#96b5b4;\">dispose</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">            }\n</span><span style=\"color:#4f5b66;\">            retain\n</span><span style=\"color:#4f5b66;\">        })\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">impl </span><span style=\"color:#4f5b66;\">Default </span><span style=\"color:#b48ead;\">for </span><span style=\"color:#4f5b66;\">Todos {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">default</span><span style=\"color:#4f5b66;\">() -&gt; </span><span style=\"color:#b48ead;\">Self </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">Self</span><span style=\"color:#4f5b66;\">::new()\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#4f5b66;\">(Debug, PartialEq, Eq, Clone, Serialize, Deserialize)]\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#4f5b66;\">Todo {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">id</span><span style=\"color:#4f5b66;\">: Uuid,\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">title</span><span style=\"color:#4f5b66;\">: RwSignal&lt;String&gt;,\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">completed</span><span style=\"color:#4f5b66;\">: RwSignal&lt;</span><span style=\"color:#b48ead;\">bool</span><span style=\"color:#4f5b66;\">&gt;,\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">impl </span><span style=\"color:#4f5b66;\">Todo {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">new</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#bf616a;\">id</span><span style=\"color:#4f5b66;\">: Uuid, </span><span style=\"color:#bf616a;\">title</span><span style=\"color:#4f5b66;\">: String) -&gt; </span><span style=\"color:#b48ead;\">Self </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">Self</span><span style=\"color:#4f5b66;\">::new_with_completed(id, title, </span><span style=\"color:#d08770;\">false</span><span style=\"color:#4f5b66;\">)\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">new_with_completed</span><span style=\"color:#4f5b66;\">(\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#bf616a;\">id</span><span style=\"color:#4f5b66;\">: Uuid,\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#bf616a;\">title</span><span style=\"color:#4f5b66;\">: String,\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#bf616a;\">completed</span><span style=\"color:#4f5b66;\">: </span><span style=\"color:#b48ead;\">bool</span><span style=\"color:#4f5b66;\">,\n</span><span style=\"color:#4f5b66;\">    ) -&gt; </span><span style=\"color:#b48ead;\">Self </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// RwSignal combines the getter and setter in one struct, rather than separating\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// the getter from the setter. This makes it more convenient in some cases, such\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// as when we&#39;re putting the signals into a struct and passing it around. There&#39;s\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// no real difference: you could use `create_signal` here, or use `create_rw_signal`\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// everywhere.\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> title = </span><span style=\"color:#96b5b4;\">create_rw_signal</span><span style=\"color:#4f5b66;\">(title);\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> completed = </span><span style=\"color:#96b5b4;\">create_rw_signal</span><span style=\"color:#4f5b66;\">(completed);\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">Self </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">            id,\n</span><span style=\"color:#4f5b66;\">            title,\n</span><span style=\"color:#4f5b66;\">            completed,\n</span><span style=\"color:#4f5b66;\">        }\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">toggle</span><span style=\"color:#4f5b66;\">(&amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">) {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// A signal&#39;s `update()` function gives you a mutable reference to the current value\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// You can use that to modify the value in place, which will notify any subscribers.\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#4f5b66;\">.completed.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">completed</span><span style=\"color:#4f5b66;\">| *completed = !*completed);\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">const </span><span style=\"color:#d08770;\">ESCAPE_KEY</span><span style=\"color:#4f5b66;\">: </span><span style=\"color:#b48ead;\">u32 </span><span style=\"color:#4f5b66;\">= </span><span style=\"color:#d08770;\">27</span><span style=\"color:#4f5b66;\">;\n</span><span style=\"color:#b48ead;\">const </span><span style=\"color:#d08770;\">ENTER_KEY</span><span style=\"color:#4f5b66;\">: </span><span style=\"color:#b48ead;\">u32 </span><span style=\"color:#4f5b66;\">= </span><span style=\"color:#d08770;\">13</span><span style=\"color:#4f5b66;\">;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">showcase</span><span style=\"color:#4f5b66;\">() -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// The `todos` are a signal, since we need to reactively update the list\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#4f5b66;\">(todos, set_todos) = </span><span style=\"color:#96b5b4;\">create_signal</span><span style=\"color:#4f5b66;\">(Todos::new());\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// We provide a context that each &lt;Todo/&gt; component can use to update the list\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// Here, I&#39;m just passing the `WriteSignal`; a &lt;Todo/&gt; doesn&#39;t need to read the whole list\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// (and shouldn&#39;t try to, as that would cause each individual &lt;Todo/&gt; to re-render when\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// a new todo is added! This kind of hygiene is why `create_signal` defaults to read-write\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// segregation.)\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#96b5b4;\">provide_context</span><span style=\"color:#4f5b66;\">(set_todos);\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// Handle the three filter modes: All, Active, and Completed\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#4f5b66;\">(mode, set_mode) = </span><span style=\"color:#96b5b4;\">create_signal</span><span style=\"color:#4f5b66;\">(Mode::All);\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#96b5b4;\">window_event_listener</span><span style=\"color:#4f5b66;\">(ev::hashchange, </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> new_mode =\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#96b5b4;\">location_hash</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">hash</span><span style=\"color:#4f5b66;\">| </span><span style=\"color:#96b5b4;\">route</span><span style=\"color:#4f5b66;\">(&amp;hash)).</span><span style=\"color:#96b5b4;\">unwrap_or_default</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#96b5b4;\">set_mode</span><span style=\"color:#4f5b66;\">(new_mode);\n</span><span style=\"color:#4f5b66;\">    });\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// Callback to add a todo on pressing the `Enter` key, if the field isn&#39;t empty\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> input_ref = create_node_ref::&lt;Input&gt;();\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> add_todo = </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|ev: web_sys::KeyboardEvent| {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> input = input_ref.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">        ev.</span><span style=\"color:#96b5b4;\">stop_propagation</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> key_code = ev.</span><span style=\"color:#96b5b4;\">key_code</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#4f5b66;\"> key_code == </span><span style=\"color:#d08770;\">ENTER_KEY </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> title = input.</span><span style=\"color:#96b5b4;\">value</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> title = title.</span><span style=\"color:#96b5b4;\">trim</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#b48ead;\">if </span><span style=\"color:#4f5b66;\">!title.</span><span style=\"color:#96b5b4;\">is_empty</span><span style=\"color:#4f5b66;\">() {\n</span><span style=\"color:#4f5b66;\">                </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> new = Todo::new(Uuid::new_v4(), title.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#4f5b66;\">());\n</span><span style=\"color:#4f5b66;\">                set_todos.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">t</span><span style=\"color:#4f5b66;\">| t.</span><span style=\"color:#96b5b4;\">add</span><span style=\"color:#4f5b66;\">(new));\n</span><span style=\"color:#4f5b66;\">                input.</span><span style=\"color:#96b5b4;\">set_value</span><span style=\"color:#4f5b66;\">(&quot;&quot;);\n</span><span style=\"color:#4f5b66;\">            }\n</span><span style=\"color:#4f5b66;\">        }\n</span><span style=\"color:#4f5b66;\">    };\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// A derived signal that filters the list of the todos depending on the filter mode\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// This doesn&#39;t need to be a `Memo`, because we&#39;re only reading it in one place\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> filtered_todos = </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| {\n</span><span style=\"color:#4f5b66;\">        todos.</span><span style=\"color:#96b5b4;\">with</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">todos</span><span style=\"color:#4f5b66;\">| </span><span style=\"color:#b48ead;\">match</span><span style=\"color:#4f5b66;\"> mode.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">() {\n</span><span style=\"color:#4f5b66;\">            Mode::All =&gt; todos.</span><span style=\"color:#d08770;\">0.</span><span style=\"color:#96b5b4;\">to_vec</span><span style=\"color:#4f5b66;\">(),\n</span><span style=\"color:#4f5b66;\">            Mode::Active =&gt; todos\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#d08770;\">0\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">filter</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">todo</span><span style=\"color:#4f5b66;\">| !todo.completed.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">())\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">cloned</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">collect</span><span style=\"color:#4f5b66;\">(),\n</span><span style=\"color:#4f5b66;\">            Mode::Completed =&gt; todos\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#d08770;\">0\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">filter</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">todo</span><span style=\"color:#4f5b66;\">| todo.completed.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">())\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">cloned</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">collect</span><span style=\"color:#4f5b66;\">(),\n</span><span style=\"color:#4f5b66;\">        })\n</span><span style=\"color:#4f5b66;\">    };\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// Serialization\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">//\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// the effect reads the `todos` signal, and each `Todo`&#39;s title and completed\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// status,  so it will automatically re-run on any change to the list of tasks\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">//\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// this is the main point of `create_effect`: to synchronize reactive state\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// with something outside the reactive system (like localStorage)\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#96b5b4;\">create_effect</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#4f5b66;\">Ok(Some(storage)) = </span><span style=\"color:#96b5b4;\">window</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">local_storage</span><span style=\"color:#4f5b66;\">() {\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> json = serde_json::to_string(&amp;todos)\n</span><span style=\"color:#4f5b66;\">                .</span><span style=\"color:#96b5b4;\">expect</span><span style=\"color:#4f5b66;\">(&quot;</span><span style=\"color:#a3be8c;\">couldn&#39;t serialize Todos</span><span style=\"color:#4f5b66;\">&quot;);\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#4f5b66;\"> storage.</span><span style=\"color:#96b5b4;\">set_item</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">STORAGE_KEY</span><span style=\"color:#4f5b66;\">, &amp;json).</span><span style=\"color:#96b5b4;\">is_err</span><span style=\"color:#4f5b66;\">() {\n</span><span style=\"color:#4f5b66;\">                error!(&quot;</span><span style=\"color:#a3be8c;\">error while trying to set item in localStorage</span><span style=\"color:#4f5b66;\">&quot;);\n</span><span style=\"color:#4f5b66;\">            }\n</span><span style=\"color:#4f5b66;\">        }\n</span><span style=\"color:#4f5b66;\">    });\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// focus the main input on load\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#96b5b4;\">create_effect</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#4f5b66;\">Some(input) = input_ref.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">() {\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#4f5b66;\">_ = input.</span><span style=\"color:#96b5b4;\">focus</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">        }\n</span><span style=\"color:#4f5b66;\">    });\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    view! {\n</span><span style=\"color:#4f5b66;\">        &lt;main&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;section class=&quot;</span><span style=\"color:#a3be8c;\">todoapp</span><span style=\"color:#4f5b66;\">&quot;&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;header class=&quot;</span><span style=\"color:#a3be8c;\">header</span><span style=\"color:#4f5b66;\">&quot;&gt;\n</span><span style=\"color:#4f5b66;\">                    &lt;h1&gt;&quot;</span><span style=\"color:#a3be8c;\">todos</span><span style=\"color:#4f5b66;\">&quot;&lt;/h1&gt;\n</span><span style=\"color:#4f5b66;\">                    &lt;input\n</span><span style=\"color:#4f5b66;\">                        class=&quot;</span><span style=\"color:#a3be8c;\">new-todo</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                        placeholder=&quot;</span><span style=\"color:#a3be8c;\">What needs to be done?</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                        autofocus\n</span><span style=\"color:#4f5b66;\">                        on:keydown=add_todo\n</span><span style=\"color:#4f5b66;\">                        node_ref=input_ref\n</span><span style=\"color:#4f5b66;\">                    /&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;/header&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;section\n</span><span style=\"color:#4f5b66;\">                    class=&quot;</span><span style=\"color:#a3be8c;\">main</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                    class:hidden={</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| todos.</span><span style=\"color:#96b5b4;\">with</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">t</span><span style=\"color:#4f5b66;\">| t.</span><span style=\"color:#96b5b4;\">is_empty</span><span style=\"color:#4f5b66;\">())}\n</span><span style=\"color:#4f5b66;\">                &gt;\n</span><span style=\"color:#4f5b66;\">                    &lt;input id=&quot;</span><span style=\"color:#a3be8c;\">toggle-all</span><span style=\"color:#4f5b66;\">&quot; class=&quot;</span><span style=\"color:#a3be8c;\">toggle-all</span><span style=\"color:#4f5b66;\">&quot; </span><span style=\"color:#b48ead;\">type</span><span style=\"color:#4f5b66;\">=&quot;</span><span style=\"color:#a3be8c;\">checkbox</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                        prop:checked={</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| todos.</span><span style=\"color:#96b5b4;\">with</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">t</span><span style=\"color:#4f5b66;\">| t.</span><span style=\"color:#96b5b4;\">remaining</span><span style=\"color:#4f5b66;\">() &gt; </span><span style=\"color:#d08770;\">0</span><span style=\"color:#4f5b66;\">)}\n</span><span style=\"color:#4f5b66;\">                        on:input=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| todos.</span><span style=\"color:#96b5b4;\">with</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">t</span><span style=\"color:#4f5b66;\">| t.</span><span style=\"color:#96b5b4;\">toggle_all</span><span style=\"color:#4f5b66;\">())\n</span><span style=\"color:#4f5b66;\">                    /&gt;\n</span><span style=\"color:#4f5b66;\">                    &lt;label </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#4f5b66;\">=&quot;</span><span style=\"color:#a3be8c;\">toggle-all</span><span style=\"color:#4f5b66;\">&quot;&gt;&quot;</span><span style=\"color:#a3be8c;\">Mark all as complete</span><span style=\"color:#4f5b66;\">&quot;&lt;/label&gt;\n</span><span style=\"color:#4f5b66;\">                    &lt;ul class=&quot;</span><span style=\"color:#a3be8c;\">todo-list</span><span style=\"color:#4f5b66;\">&quot;&gt;\n</span><span style=\"color:#4f5b66;\">                        &lt;For\n</span><span style=\"color:#4f5b66;\">                            each=filtered_todos\n</span><span style=\"color:#4f5b66;\">                            </span><span style=\"color:#8fa1b3;\">key</span><span style=\"color:#4f5b66;\">=|</span><span style=\"color:#bf616a;\">todo</span><span style=\"color:#4f5b66;\">| todo.id\n</span><span style=\"color:#4f5b66;\">                            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\">:todo\n</span><span style=\"color:#4f5b66;\">                        &gt;\n</span><span style=\"color:#4f5b66;\">                            &lt;Todo todo/&gt;\n</span><span style=\"color:#4f5b66;\">                        &lt;/For&gt;\n</span><span style=\"color:#4f5b66;\">                    &lt;/ul&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;/section&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;footer\n</span><span style=\"color:#4f5b66;\">                    class=&quot;</span><span style=\"color:#a3be8c;\">footer</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                    class:hidden={</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| todos.</span><span style=\"color:#96b5b4;\">with</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">t</span><span style=\"color:#4f5b66;\">| t.</span><span style=\"color:#96b5b4;\">is_empty</span><span style=\"color:#4f5b66;\">())}\n</span><span style=\"color:#4f5b66;\">                &gt;\n</span><span style=\"color:#4f5b66;\">                    &lt;span class=&quot;</span><span style=\"color:#a3be8c;\">todo-count</span><span style=\"color:#4f5b66;\">&quot;&gt;\n</span><span style=\"color:#4f5b66;\">                        &lt;strong&gt;{</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| todos.</span><span style=\"color:#96b5b4;\">with</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">t</span><span style=\"color:#4f5b66;\">| t.</span><span style=\"color:#96b5b4;\">remaining</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#4f5b66;\">())}&lt;/strong&gt;\n</span><span style=\"color:#4f5b66;\">                        {</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#4f5b66;\"> todos.</span><span style=\"color:#96b5b4;\">with</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">t</span><span style=\"color:#4f5b66;\">| t.</span><span style=\"color:#96b5b4;\">remaining</span><span style=\"color:#4f5b66;\">()) == </span><span style=\"color:#d08770;\">1 </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">                            &quot;</span><span style=\"color:#a3be8c;\"> item</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                        } </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">                            &quot;</span><span style=\"color:#a3be8c;\"> items</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                        }}\n</span><span style=\"color:#4f5b66;\">                        &quot;</span><span style=\"color:#a3be8c;\"> left</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                    &lt;/span&gt;\n</span><span style=\"color:#4f5b66;\">                    &lt;ul class=&quot;</span><span style=\"color:#a3be8c;\">filters</span><span style=\"color:#4f5b66;\">&quot;&gt;\n</span><span style=\"color:#4f5b66;\">                        &lt;li&gt;&lt;a href=&quot;</span><span style=\"color:#a3be8c;\">#/</span><span style=\"color:#4f5b66;\">&quot; class=&quot;</span><span style=\"color:#a3be8c;\">selected</span><span style=\"color:#4f5b66;\">&quot; class:selected={</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| </span><span style=\"color:#96b5b4;\">mode</span><span style=\"color:#4f5b66;\">() == Mode::All}&gt;&quot;</span><span style=\"color:#a3be8c;\">All</span><span style=\"color:#4f5b66;\">&quot;&lt;/a&gt;&lt;/li&gt;\n</span><span style=\"color:#4f5b66;\">                        &lt;li&gt;&lt;a href=&quot;</span><span style=\"color:#a3be8c;\">#/active</span><span style=\"color:#4f5b66;\">&quot; class:selected={</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| </span><span style=\"color:#96b5b4;\">mode</span><span style=\"color:#4f5b66;\">() == Mode::Active}&gt;&quot;</span><span style=\"color:#a3be8c;\">Active</span><span style=\"color:#4f5b66;\">&quot;&lt;/a&gt;&lt;/li&gt;\n</span><span style=\"color:#4f5b66;\">                        &lt;li&gt;&lt;a href=&quot;</span><span style=\"color:#a3be8c;\">#/completed</span><span style=\"color:#4f5b66;\">&quot; class:selected={</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| </span><span style=\"color:#96b5b4;\">mode</span><span style=\"color:#4f5b66;\">() == Mode::Completed}&gt;&quot;</span><span style=\"color:#a3be8c;\">Completed</span><span style=\"color:#4f5b66;\">&quot;&lt;/a&gt;&lt;/li&gt;\n</span><span style=\"color:#4f5b66;\">                    &lt;/ul&gt;\n</span><span style=\"color:#4f5b66;\">                    &lt;button\n</span><span style=\"color:#4f5b66;\">                        class=&quot;</span><span style=\"color:#a3be8c;\">clear-completed hidden</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                        class:hidden={</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| todos.</span><span style=\"color:#96b5b4;\">with</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">t</span><span style=\"color:#4f5b66;\">| t.</span><span style=\"color:#96b5b4;\">completed</span><span style=\"color:#4f5b66;\">() == </span><span style=\"color:#d08770;\">0</span><span style=\"color:#4f5b66;\">)}\n</span><span style=\"color:#4f5b66;\">                        on:click=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| set_todos.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">t</span><span style=\"color:#4f5b66;\">| t.</span><span style=\"color:#96b5b4;\">clear_completed</span><span style=\"color:#4f5b66;\">())\n</span><span style=\"color:#4f5b66;\">                    &gt;\n</span><span style=\"color:#4f5b66;\">                        &quot;</span><span style=\"color:#a3be8c;\">Clear completed</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                    &lt;/button&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;/footer&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;/section&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;footer class=&quot;</span><span style=\"color:#a3be8c;\">info</span><span style=\"color:#4f5b66;\">&quot;&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;p&gt;&quot;</span><span style=\"color:#a3be8c;\">Double-click to edit a todo</span><span style=\"color:#4f5b66;\">&quot;&lt;/p&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;p&gt;&quot;</span><span style=\"color:#a3be8c;\">Created by </span><span style=\"color:#4f5b66;\">&quot;&lt;a href=&quot;</span><span style=\"color:#a3be8c;\">http://todomvc.com</span><span style=\"color:#4f5b66;\">&quot;&gt;&quot;</span><span style=\"color:#a3be8c;\">Greg Johnston</span><span style=\"color:#4f5b66;\">&quot;&lt;/a&gt;&lt;/p&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;p&gt;&quot;</span><span style=\"color:#a3be8c;\">Part of </span><span style=\"color:#4f5b66;\">&quot;&lt;a href=&quot;</span><span style=\"color:#a3be8c;\">http://todomvc.com</span><span style=\"color:#4f5b66;\">&quot;&gt;&quot;</span><span style=\"color:#a3be8c;\">TodoMVC</span><span style=\"color:#4f5b66;\">&quot;&lt;/a&gt;&lt;/p&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;/footer&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;/main&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#4f5b66;\">]\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">Todo</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#bf616a;\">todo</span><span style=\"color:#4f5b66;\">: Todo) -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#4f5b66;\">(editing, set_editing) = </span><span style=\"color:#96b5b4;\">create_signal</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">false</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> set_todos = use_context::&lt;WriteSignal&lt;Todos&gt;&gt;().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// this will be filled by node_ref=input below\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> todo_input = create_node_ref::&lt;Input&gt;();\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> save = </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|value: &amp;</span><span style=\"color:#b48ead;\">str</span><span style=\"color:#4f5b66;\">| {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> value = value.</span><span style=\"color:#96b5b4;\">trim</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#4f5b66;\"> value.</span><span style=\"color:#96b5b4;\">is_empty</span><span style=\"color:#4f5b66;\">() {\n</span><span style=\"color:#4f5b66;\">            set_todos.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">t</span><span style=\"color:#4f5b66;\">| t.</span><span style=\"color:#96b5b4;\">remove</span><span style=\"color:#4f5b66;\">(todo.id));\n</span><span style=\"color:#4f5b66;\">        } </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">            todo.title.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#4f5b66;\">(value.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#4f5b66;\">());\n</span><span style=\"color:#4f5b66;\">        }\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#96b5b4;\">set_editing</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">false</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">    };\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    view! {\n</span><span style=\"color:#4f5b66;\">        &lt;li\n</span><span style=\"color:#4f5b66;\">            class=&quot;</span><span style=\"color:#a3be8c;\">todo</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">            class:editing={editing}\n</span><span style=\"color:#4f5b66;\">            class:completed={</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| todo.completed.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">()}\n</span><span style=\"color:#4f5b66;\">        &gt;\n</span><span style=\"color:#4f5b66;\">            &lt;div class=&quot;</span><span style=\"color:#a3be8c;\">view</span><span style=\"color:#4f5b66;\">&quot;&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;input\n</span><span style=\"color:#4f5b66;\">                    node_ref=todo_input\n</span><span style=\"color:#4f5b66;\">                    class=&quot;</span><span style=\"color:#a3be8c;\">toggle</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#b48ead;\">type</span><span style=\"color:#4f5b66;\">=&quot;</span><span style=\"color:#a3be8c;\">checkbox</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                    prop:checked={</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| (todo.completed)()}\n</span><span style=\"color:#4f5b66;\">                    on:input={</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|ev| {\n</span><span style=\"color:#4f5b66;\">                        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> checked = </span><span style=\"color:#96b5b4;\">event_target_checked</span><span style=\"color:#4f5b66;\">(&amp;ev);\n</span><span style=\"color:#4f5b66;\">                        todo.completed.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#4f5b66;\">(checked);\n</span><span style=\"color:#4f5b66;\">                    }}\n</span><span style=\"color:#4f5b66;\">                /&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;label on:dblclick=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| {\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#96b5b4;\">set_editing</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">true</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#4f5b66;\">Some(input) = todo_input.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">() {\n</span><span style=\"color:#4f5b66;\">                        _ = input.</span><span style=\"color:#96b5b4;\">focus</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">                    }\n</span><span style=\"color:#4f5b66;\">                }&gt;\n</span><span style=\"color:#4f5b66;\">                    {</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| todo.title.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">()}\n</span><span style=\"color:#4f5b66;\">                &lt;/label&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;button class=&quot;</span><span style=\"color:#a3be8c;\">destroy</span><span style=\"color:#4f5b66;\">&quot; on:click=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| set_todos.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">t</span><span style=\"color:#4f5b66;\">| t.</span><span style=\"color:#96b5b4;\">remove</span><span style=\"color:#4f5b66;\">(todo.id))/&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;/div&gt;\n</span><span style=\"color:#4f5b66;\">            {</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| </span><span style=\"color:#96b5b4;\">editing</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">then</span><span style=\"color:#4f5b66;\">(|| view! {\n</span><span style=\"color:#4f5b66;\">                &lt;input\n</span><span style=\"color:#4f5b66;\">                    class=&quot;</span><span style=\"color:#a3be8c;\">edit</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                    class:hidden={</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| !(editing)()}\n</span><span style=\"color:#4f5b66;\">                    prop:value={</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| todo.title.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">()}\n</span><span style=\"color:#4f5b66;\">                    on:focusout=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|ev: web_sys::FocusEvent| </span><span style=\"color:#96b5b4;\">save</span><span style=\"color:#4f5b66;\">(&amp;</span><span style=\"color:#96b5b4;\">event_target_value</span><span style=\"color:#4f5b66;\">(&amp;ev))\n</span><span style=\"color:#4f5b66;\">                    on:keyup={</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|ev: web_sys::KeyboardEvent| {\n</span><span style=\"color:#4f5b66;\">                        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> key_code = ev.</span><span style=\"color:#96b5b4;\">key_code</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">                        </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#4f5b66;\"> key_code == </span><span style=\"color:#d08770;\">ENTER_KEY </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">                            </span><span style=\"color:#96b5b4;\">save</span><span style=\"color:#4f5b66;\">(&amp;</span><span style=\"color:#96b5b4;\">event_target_value</span><span style=\"color:#4f5b66;\">(&amp;ev));\n</span><span style=\"color:#4f5b66;\">                        } </span><span style=\"color:#b48ead;\">else if</span><span style=\"color:#4f5b66;\"> key_code == </span><span style=\"color:#d08770;\">ESCAPE_KEY </span><span style=\"color:#4f5b66;\">{\n</span><span style=\"color:#4f5b66;\">                            </span><span style=\"color:#96b5b4;\">set_editing</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">false</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">                        }\n</span><span style=\"color:#4f5b66;\">                    }}\n</span><span style=\"color:#4f5b66;\">                /&gt;\n</span><span style=\"color:#4f5b66;\">            })\n</span><span style=\"color:#4f5b66;\">        }\n</span><span style=\"color:#4f5b66;\">        &lt;/li&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#4f5b66;\">(Debug, Default, Clone, Copy, PartialEq, Eq)]\n</span><span style=\"color:#b48ead;\">pub enum </span><span style=\"color:#4f5b66;\">Mode {\n</span><span style=\"color:#4f5b66;\">    Active,\n</span><span style=\"color:#4f5b66;\">    Completed,\n</span><span style=\"color:#4f5b66;\">    #[</span><span style=\"color:#bf616a;\">default</span><span style=\"color:#4f5b66;\">]\n</span><span style=\"color:#4f5b66;\">    All,\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">route</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#bf616a;\">hash</span><span style=\"color:#4f5b66;\">: &amp;</span><span style=\"color:#b48ead;\">str</span><span style=\"color:#4f5b66;\">) -&gt; Mode {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">match</span><span style=\"color:#4f5b66;\"> hash {\n</span><span style=\"color:#4f5b66;\">        &quot;</span><span style=\"color:#a3be8c;\">/active</span><span style=\"color:#4f5b66;\">&quot; =&gt; Mode::Active,\n</span><span style=\"color:#4f5b66;\">        &quot;</span><span style=\"color:#a3be8c;\">/completed</span><span style=\"color:#4f5b66;\">&quot; =&gt; Mode::Completed,\n</span><span style=\"color:#4f5b66;\">        _ =&gt; Mode::All,\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span></pre>\n",
                code: pack_example(todomvc::showcase),
                css: Some(include_str!("../examples/todomvc.css")),
                description: "the classic `todomvc` example, with local storage included",
                motivation: "<p>It is very well explained at <a href=\"https://todomvc.com/\">https://todomvc.com/</a></p>\n",
                related: None,
            },
        ),
        (
            "iteration",
            Example {
                highlighted_source: "<pre style=\"background-color:#eff1f5;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos::*;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#a7adba;\">// Iteration is a very common task in most applications.\n</span><span style=\"color:#a7adba;\">// So how do you take a list of data and render it in the DOM?\n</span><span style=\"color:#a7adba;\">// This example will show you the two ways:\n</span><span style=\"color:#a7adba;\">// 1) for mostly-static lists, using Rust iterators\n</span><span style=\"color:#a7adba;\">// 2) for lists that grow, shrink, or move items, using &lt;For/&gt;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">showcase</span><span style=\"color:#4f5b66;\">() -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    view! {\n</span><span style=\"color:#4f5b66;\">        &lt;h1&gt;&quot;</span><span style=\"color:#a3be8c;\">Iteration</span><span style=\"color:#4f5b66;\">&quot;&lt;/h1&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;h2&gt;&quot;</span><span style=\"color:#a3be8c;\">Static List</span><span style=\"color:#4f5b66;\">&quot;&lt;/h2&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;p&gt;&quot;</span><span style=\"color:#a3be8c;\">Use this pattern if the list itself is static.</span><span style=\"color:#4f5b66;\">&quot;&lt;/p&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;StaticList length=</span><span style=\"color:#d08770;\">5</span><span style=\"color:#4f5b66;\">/&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;h2&gt;&quot;</span><span style=\"color:#a3be8c;\">Dynamic List</span><span style=\"color:#4f5b66;\">&quot;&lt;/h2&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;p&gt;&quot;</span><span style=\"color:#a3be8c;\">Use this pattern if the rows in your list will change.</span><span style=\"color:#4f5b66;\">&quot;&lt;/p&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;DynamicList initial_length=</span><span style=\"color:#d08770;\">5</span><span style=\"color:#4f5b66;\">/&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#a7adba;\">/// A list of counters, without the ability\n</span><span style=\"color:#a7adba;\">/// to add or remove any.\n</span><span style=\"color:#4f5b66;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#4f5b66;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">StaticList</span><span style=\"color:#4f5b66;\">(\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">/// How many counters to include in this list.\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#bf616a;\">length</span><span style=\"color:#4f5b66;\">: </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#4f5b66;\">,\n</span><span style=\"color:#4f5b66;\">) -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// create counter signals that start at incrementing numbers\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> counters = (</span><span style=\"color:#d08770;\">1</span><span style=\"color:#4f5b66;\">..=length).</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">idx</span><span style=\"color:#4f5b66;\">| </span><span style=\"color:#96b5b4;\">create_signal</span><span style=\"color:#4f5b66;\">(idx));\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// when you have a list that doesn&#39;t change, you can\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// manipulate it using ordinary Rust iterators\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// and collect it into a Vec&lt;_&gt; to insert it into the DOM\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> counter_buttons = counters\n</span><span style=\"color:#4f5b66;\">        .</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#4f5b66;\">(|(</span><span style=\"color:#bf616a;\">count</span><span style=\"color:#4f5b66;\">, </span><span style=\"color:#bf616a;\">set_count</span><span style=\"color:#4f5b66;\">)| {\n</span><span style=\"color:#4f5b66;\">            view! {\n</span><span style=\"color:#4f5b66;\">                &lt;li&gt;\n</span><span style=\"color:#4f5b66;\">                    &lt;button\n</span><span style=\"color:#4f5b66;\">                        on:click=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| set_count.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">n</span><span style=\"color:#4f5b66;\">| *n += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#4f5b66;\">)\n</span><span style=\"color:#4f5b66;\">                    &gt;\n</span><span style=\"color:#4f5b66;\">                        {count}\n</span><span style=\"color:#4f5b66;\">                    &lt;/button&gt;\n</span><span style=\"color:#4f5b66;\">                &lt;/li&gt;\n</span><span style=\"color:#4f5b66;\">            }\n</span><span style=\"color:#4f5b66;\">        })\n</span><span style=\"color:#4f5b66;\">        .collect::&lt;Vec&lt;_&gt;&gt;();\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// Note that if `counter_buttons` were a reactive list\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// and its value changed, this would be very inefficient:\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// it would rerender every row every time the list changed.\n</span><span style=\"color:#4f5b66;\">    view! {\n</span><span style=\"color:#4f5b66;\">        &lt;ul&gt;{counter_buttons}&lt;/ul&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#a7adba;\">/// A list of counters that allows you to add or\n</span><span style=\"color:#a7adba;\">/// remove counters.\n</span><span style=\"color:#4f5b66;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#4f5b66;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">DynamicList</span><span style=\"color:#4f5b66;\">(\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">/// The number of counters to begin with.\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#bf616a;\">initial_length</span><span style=\"color:#4f5b66;\">: </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#4f5b66;\">,\n</span><span style=\"color:#4f5b66;\">) -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// This dynamic list will use the &lt;For/&gt; component.\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// &lt;For/&gt; is a keyed list. This means that each row\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// has a defined key. If the key does not change, the row\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// will not be re-rendered. When the list changes, only\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// the minimum number of changes will be made to the DOM.\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// `next_counter_id` will let us generate unique IDs\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// we do this by simply incrementing the ID by one\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// each time we create a counter\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#4f5b66;\"> next_counter_id = initial_length;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// we generate an initial list as in &lt;StaticList/&gt;\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// but this time we include the ID along with the signal\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> initial_counters = (</span><span style=\"color:#d08770;\">0</span><span style=\"color:#4f5b66;\">..initial_length)\n</span><span style=\"color:#4f5b66;\">        .</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">id</span><span style=\"color:#4f5b66;\">| (id, </span><span style=\"color:#96b5b4;\">create_signal</span><span style=\"color:#4f5b66;\">(id + </span><span style=\"color:#d08770;\">1</span><span style=\"color:#4f5b66;\">)))\n</span><span style=\"color:#4f5b66;\">        .collect::&lt;Vec&lt;_&gt;&gt;();\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// now we store that initial list in a signal\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// this way, we&#39;ll be able to modify the list over time,\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#a7adba;\">// adding and removing counters, and it will change reactively\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#4f5b66;\">(counters, set_counters) = </span><span style=\"color:#96b5b4;\">create_signal</span><span style=\"color:#4f5b66;\">(initial_counters);\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> add_counter = </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| {\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// create a signal for the new counter\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> sig = </span><span style=\"color:#96b5b4;\">create_signal</span><span style=\"color:#4f5b66;\">(next_counter_id + </span><span style=\"color:#d08770;\">1</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// add this counter to the list of counters\n</span><span style=\"color:#4f5b66;\">        set_counters.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|counters| {\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#a7adba;\">// since `.update()` gives us `&amp;mut T`\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#a7adba;\">// we can just use normal Vec methods like `push`\n</span><span style=\"color:#4f5b66;\">            counters.</span><span style=\"color:#96b5b4;\">push</span><span style=\"color:#4f5b66;\">((next_counter_id, sig))\n</span><span style=\"color:#4f5b66;\">        });\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#a7adba;\">// increment the ID so it&#39;s always unique\n</span><span style=\"color:#4f5b66;\">        next_counter_id += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#4f5b66;\">;\n</span><span style=\"color:#4f5b66;\">    };\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    view! {\n</span><span style=\"color:#4f5b66;\">        &lt;div&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;button on:click=add_counter&gt;\n</span><span style=\"color:#4f5b66;\">                &quot;</span><span style=\"color:#a3be8c;\">Add Counter</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">            &lt;/button&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;ul&gt;\n</span><span style=\"color:#4f5b66;\">                </span><span style=\"color:#a7adba;\">// The &lt;For/&gt; component is central here\n</span><span style=\"color:#4f5b66;\">                </span><span style=\"color:#a7adba;\">// This allows for efficient, key list rendering\n</span><span style=\"color:#4f5b66;\">                &lt;For\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#a7adba;\">// `each` takes any function that returns an iterator\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#a7adba;\">// this should usually be a signal or derived signal\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#a7adba;\">// if it&#39;s not reactive, just render a Vec&lt;_&gt; instead of &lt;For/&gt;\n</span><span style=\"color:#4f5b66;\">                    each=counters\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#a7adba;\">// the key should be unique and stable for each row\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#a7adba;\">// using an index is usually a bad idea, unless your list\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#a7adba;\">// can only grow, because moving items around inside the list\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#a7adba;\">// means their indices will change and they will all rerender\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#8fa1b3;\">key</span><span style=\"color:#4f5b66;\">=|</span><span style=\"color:#bf616a;\">counter</span><span style=\"color:#4f5b66;\">| counter.</span><span style=\"color:#d08770;\">0\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#a7adba;\">// `children` receives each item from your `each` iterator\n</span><span style=\"color:#4f5b66;\">                    </span><span style=\"color:#a7adba;\">// and returns a view\n</span><span style=\"color:#4f5b66;\">                    children=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|(id, (count, set_count))| {\n</span><span style=\"color:#4f5b66;\">                        view! {\n</span><span style=\"color:#4f5b66;\">                            &lt;li&gt;\n</span><span style=\"color:#4f5b66;\">                                &lt;button\n</span><span style=\"color:#4f5b66;\">                                    on:click=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| set_count.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">n</span><span style=\"color:#4f5b66;\">| *n += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#4f5b66;\">)\n</span><span style=\"color:#4f5b66;\">                                &gt;\n</span><span style=\"color:#4f5b66;\">                                    {count}\n</span><span style=\"color:#4f5b66;\">                                &lt;/button&gt;\n</span><span style=\"color:#4f5b66;\">                                &lt;button\n</span><span style=\"color:#4f5b66;\">                                    on:click=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| {\n</span><span style=\"color:#4f5b66;\">                                        set_counters.</span><span style=\"color:#96b5b4;\">update</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">counters</span><span style=\"color:#4f5b66;\">| {\n</span><span style=\"color:#4f5b66;\">                                            counters.</span><span style=\"color:#96b5b4;\">retain</span><span style=\"color:#4f5b66;\">(|(</span><span style=\"color:#bf616a;\">counter_id</span><span style=\"color:#4f5b66;\">, _)| counter_id != &amp;id)\n</span><span style=\"color:#4f5b66;\">                                        });\n</span><span style=\"color:#4f5b66;\">                                    }\n</span><span style=\"color:#4f5b66;\">                                &gt;\n</span><span style=\"color:#4f5b66;\">                                    &quot;</span><span style=\"color:#a3be8c;\">Remove</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">                                &lt;/button&gt;\n</span><span style=\"color:#4f5b66;\">                            &lt;/li&gt;\n</span><span style=\"color:#4f5b66;\">                        }\n</span><span style=\"color:#4f5b66;\">                    }\n</span><span style=\"color:#4f5b66;\">                /&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;/ul&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;/div&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span></pre>\n",
                code: pack_example(iteration::showcase),
                css: None,
                description: "iterate to render list and collections of items",
                motivation: "<p>strategies to show repetitions and lists of items.\nThis example illustrates static and dynamic iteration.</p>\n",
                related: Some(
                    "<p><a href=\"https://leptos-rs.github.io/leptos/view/04_iteration.html\">https://leptos-rs.github.io/leptos/view/04_iteration.html</a></p>\n",
                ),
            },
        ),
        (
            "dynamic_font",
            Example {
                highlighted_source: "<pre style=\"background-color:#eff1f5;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos::html::Select;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">static </span><span style=\"color:#d08770;\">FONTS</span><span style=\"color:#4f5b66;\">: [&amp;</span><span style=\"color:#b48ead;\">str</span><span style=\"color:#4f5b66;\">; </span><span style=\"color:#d08770;\">4</span><span style=\"color:#4f5b66;\">] = [\n</span><span style=\"color:#4f5b66;\">    &quot;</span><span style=\"color:#a3be8c;\">verdana</span><span style=\"color:#4f5b66;\">&quot;,\n</span><span style=\"color:#4f5b66;\">    &quot;</span><span style=\"color:#a3be8c;\">times</span><span style=\"color:#4f5b66;\">&quot;,\n</span><span style=\"color:#4f5b66;\">    &quot;</span><span style=\"color:#a3be8c;\">sans-serif</span><span style=\"color:#4f5b66;\">&quot;,\n</span><span style=\"color:#4f5b66;\">    &quot;</span><span style=\"color:#a3be8c;\">monospace</span><span style=\"color:#4f5b66;\">&quot;,\n</span><span style=\"color:#4f5b66;\">];\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#4f5b66;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">FontSelector</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#bf616a;\">set_font_index</span><span style=\"color:#4f5b66;\">: WriteSignal&lt;</span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#4f5b66;\">&gt;) -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> select_ref = create_node_ref::&lt;Select&gt;();\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> font_options = </span><span style=\"color:#d08770;\">FONTS\n</span><span style=\"color:#4f5b66;\">    .</span><span style=\"color:#96b5b4;\">into_iter</span><span style=\"color:#4f5b66;\">()\n</span><span style=\"color:#4f5b66;\">    .</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#4f5b66;\">(|</span><span style=\"color:#bf616a;\">x</span><span style=\"color:#4f5b66;\">| view!{ &lt;option value=x.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#4f5b66;\">()&gt;{x}&lt;/option&gt; })\n</span><span style=\"color:#4f5b66;\">    .</span><span style=\"color:#96b5b4;\">collect_view</span><span style=\"color:#4f5b66;\">();\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    view!{\n</span><span style=\"color:#4f5b66;\">        &lt;label </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#4f5b66;\">=&quot;</span><span style=\"color:#a3be8c;\">fonts</span><span style=\"color:#4f5b66;\">&quot;&gt;Choose a font:&lt;</span><span style=\"background-color:#bf616a;color:#eff1f5;\">/</span><span style=\"color:#4f5b66;\">label&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;select name=&quot;</span><span style=\"color:#a3be8c;\">fonts</span><span style=\"color:#4f5b66;\">&quot; id=&quot;</span><span style=\"color:#a3be8c;\">fonts</span><span style=\"color:#4f5b66;\">&quot;\n</span><span style=\"color:#4f5b66;\">            </span><span style=\"color:#b48ead;\">ref</span><span style=\"color:#4f5b66;\">=select_ref\n</span><span style=\"color:#4f5b66;\">            on:change=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| </span><span style=\"color:#96b5b4;\">set_font_index</span><span style=\"color:#4f5b66;\">(\n</span><span style=\"color:#4f5b66;\">                select_ref.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">selected_index</span><span style=\"color:#4f5b66;\">() as </span><span style=\"color:#b48ead;\">usize\n</span><span style=\"color:#4f5b66;\">                )\n</span><span style=\"color:#4f5b66;\">        &gt;\n</span><span style=\"color:#4f5b66;\">            {font_options}\n</span><span style=\"color:#4f5b66;\">        &lt;/select&gt;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">showcase</span><span style=\"color:#4f5b66;\">() -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#4f5b66;\">(font_index, set_font_index) = </span><span style=\"color:#96b5b4;\">create_signal</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">0</span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#4f5b66;\">);\n</span><span style=\"color:#4f5b66;\">    view!{\n</span><span style=\"color:#4f5b66;\">        &lt;FontSelector set_font_index=set_font_index/&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;p\n</span><span style=\"color:#4f5b66;\">        style:font-family=</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| </span><span style=\"color:#d08770;\">FONTS</span><span style=\"color:#4f5b66;\">[</span><span style=\"color:#96b5b4;\">font_index</span><span style=\"color:#4f5b66;\">()]&gt;\n</span><span style=\"color:#4f5b66;\">            Here is how your font looks like\n</span><span style=\"color:#4f5b66;\">        &lt;/p&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span></pre>\n",
                code: pack_example(dynamic_font::showcase),
                css: None,
                description: "This component let you chose a font, and render some text with the according font dynamically.\n",
                motivation: "<p>This code shows two things:</p>\n<ul>\n<li>how you can use dynamic styles.</li>\n<li>how you can use <code>select</code></li>\n</ul>\n",
                related: Some(
                    "<p>See <a href=\"./select\">select</a> for the <code>select</code> html component</p>\n<p>For dynamic styles, see <a href=\"https://leptos-rs.github.io/leptos/view/02_dynamic_attributes.html?highlight=dynamic%20st#dynamic-styles\">here</a></p>\n",
                ),
            },
        ),
        (
            "counter_url_query",
            Example {
                highlighted_source: "<pre style=\"background-color:#eff1f5;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#4f5b66;\">leptos_router::*;\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#4f5b66;\">]\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">SimpleQueryCounter</span><span style=\"color:#4f5b66;\">() -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#4f5b66;\">(count, set_count) = create_query_signal::&lt;</span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#4f5b66;\">&gt;(&quot;</span><span style=\"color:#a3be8c;\">count</span><span style=\"color:#4f5b66;\">&quot;);\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> clear = </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| set_count.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#4f5b66;\">(None);\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> decrement =\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| set_count.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#4f5b66;\">(Some(count.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">unwrap_or</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">0</span><span style=\"color:#4f5b66;\">) - </span><span style=\"color:#d08770;\">1</span><span style=\"color:#4f5b66;\">));\n</span><span style=\"color:#4f5b66;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#4f5b66;\"> increment =\n</span><span style=\"color:#4f5b66;\">        </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|_| set_count.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#4f5b66;\">(Some(count.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">unwrap_or</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">0</span><span style=\"color:#4f5b66;\">) + </span><span style=\"color:#d08770;\">1</span><span style=\"color:#4f5b66;\">));\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#4f5b66;\">    view! {\n</span><span style=\"color:#4f5b66;\">        &lt;div&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;button on:click=clear&gt;&quot;</span><span style=\"color:#a3be8c;\">Clear</span><span style=\"color:#4f5b66;\">&quot;&lt;/button&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;button on:click=decrement&gt;&quot;</span><span style=\"color:#a3be8c;\">-1</span><span style=\"color:#4f5b66;\">&quot;&lt;/button&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;span&gt;&quot;</span><span style=\"color:#a3be8c;\">Value: </span><span style=\"color:#4f5b66;\">&quot; {</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#4f5b66;\">|| count.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#4f5b66;\">().</span><span style=\"color:#96b5b4;\">unwrap_or</span><span style=\"color:#4f5b66;\">(</span><span style=\"color:#d08770;\">0</span><span style=\"color:#4f5b66;\">)} &quot;</span><span style=\"color:#a3be8c;\">!</span><span style=\"color:#4f5b66;\">&quot;&lt;/span&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;button on:click=increment&gt;&quot;</span><span style=\"color:#a3be8c;\">+1</span><span style=\"color:#4f5b66;\">&quot;&lt;/button&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;/div&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span><span style=\"color:#4f5b66;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">showcase</span><span style=\"color:#4f5b66;\">() -&gt; impl IntoView {\n</span><span style=\"color:#4f5b66;\">    view!{\n</span><span style=\"color:#4f5b66;\">        &lt;Router&gt;\n</span><span style=\"color:#4f5b66;\">            &lt;SimpleQueryCounter/&gt;\n</span><span style=\"color:#4f5b66;\">        &lt;/Router&gt;\n</span><span style=\"color:#4f5b66;\">    }\n</span><span style=\"color:#4f5b66;\">}\n</span></pre>\n",
                code: pack_example(counter_url_query::showcase),
                css: None,
                description: "Constructs a signal synchronized with a specific URL query parameter.",
                motivation: "<p>The function creates a bidirectional sync mechanism between the state encapsulated in a signal and a URL query parameter. This means that any change to the state will update the URL, and vice versa, making the function especially useful for maintaining state consistency across page reloads.</p>\n",
                related: Some(
                    "<p>The simpler example is <a href=\"./counter\">counter</a></p>\n<p>look at the <a href=\"https://leptos-rs.github.io/leptos/router/18_params_and_queries.html?highlight=use_que#params-and-queries\">leptos documentation on params and queries</a>\nFor the <code>create_query_signal</code> documentation, see <a href=\"https://docs.rs/leptos_router/latest/leptos_router/fn.create_query_signal.html\">here</a></p>\n",
                ),
            },
        ),
    ]
        .into_iter()
        .collect()
}
